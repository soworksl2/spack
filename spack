#!/usr/bin/python3

import sys
import os
import shutil
from argparse import ArgumentParser, Namespace
from abc import ABC, abstractmethod
from functools import reduce
from subprocess import Popen, PIPE
from enum import Enum, IntFlag, auto
from typing import Optional, IO, Tuple, Any, Literal, Callable, cast


class Operation(Enum):
    COMPRESS=auto()
    DECOMPRESS=auto()

    def __str__(self) -> str:
        match (self):
            case Operation.COMPRESS:
                return 'COMPRESS'
            case Operation.DECOMPRESS:
                return 'DECOMPRESS'
            case _:
                raise AssertionError('this branch cannot be possible, I guess')

class FormatCategory(IntFlag):
    #Order matters
    ARCHIVING=auto()
    COMPRESING=auto()
    ENCRYPTING=auto()
    ALL=ARCHIVING | COMPRESING | ENCRYPTING

    def sub_and_normalize(self, other: 'FormatCategory') -> 'FormatCategory':
        new: FormatCategory = self & (~other)
        if not (new & FormatCategory.ARCHIVING):
            return FormatCategory(0)
        elif not (new & FormatCategory.COMPRESING):
            return FormatCategory.ARCHIVING
        else:
            return new

class Arity(Enum):
    ZERO=auto()
    ONE=auto()
    INF=auto()


FilesSrc = list[str] | IO[bytes]
CmdArgsGen = Callable[[Optional[str], list[str]], list[str]]

class FilesSrcResolver:
    def __init__(self) -> None:
        self._lockedset: bool = False
        self._src: Optional[FilesSrc] = None
        self._is_pipe: bool = False
        self._piped_stream: Optional[IO[bytes]] = None

    def set(self, src: FilesSrc) -> None:
        assert not self._lockedset
        self._src = src
        self._lockedset = True

    def set_pipe(self) -> None:
        assert not self._lockedset
        self._is_pipe = True
        self._lockedset = True

    def set_piped_stream(self, stream: IO[bytes]) -> None:
        self._piped_stream = stream

    def get(self) -> FilesSrc | int:
        if self._is_pipe:
            return PIPE
        elif self._src is not None:
            return self._src
        else:
            raise AssertionError('files src was not set yet')

    def get_as_args(self) -> list[str]:
        assert isinstance(self._src, list)
        return self._src

    def _get_as_piped_stream(self) -> IO[bytes]:
        assert self._piped_stream is not None
        return self._piped_stream

    def _get_as_actual_stream(self) -> IO[bytes]:
        assert isinstance(self._src, IO)
        return self._src

    def get_as_stream(self) -> IO[bytes]:
        if self._is_pipe:
            return self._get_as_piped_stream()
        else:
            return self._get_as_actual_stream()

    def has_value(self) -> bool:
        return self._src is not None

    def is_args(self) -> bool:
        return isinstance(self._src, list)

    def is_stream(self) -> bool:
        return isinstance(self._src, IO)

    def is_pipe(self) -> bool:
        return self._is_pipe

    def is_stream_or_pipe(self) -> bool:
        return self.is_stream() or self.is_pipe()
        

class Format:
    def __init__(self, name: str, category: FormatCategory) -> None:
        self.name: str = name
        self.category: FormatCategory = category

    def __repr__(self) -> str:
        return self.name

    def __key(self) -> Tuple[Any, ...]:
        return (self.name, self.category)

    def __hash__(self) -> int:
        return hash(self.__key())

    def __eq__(self, other: Any) -> bool:
        if isinstance(self, Format):
            return bool(self.__key() == other.__key())
        raise NotImplemented()

#TODO: I can split this class in two FormatManager and ToolsManager
class FormatManager:
    def __init__(self) -> None:
        self._formats: list[Format] = []
        self._exts_formats: dict[str, list[Format]] = {}
        self._cfmt_tool_rels: dict[Tuple[Format, ...], list[CTool]] = {}

    def add_format(self, fmt: str, category: FormatCategory) -> Format:
        f: Format = Format(fmt, category)
        self._formats.append(f)
        return f

    def _add_ext(self, ext: str, fmts: list[Format]) -> None:
        assert not ext in self._exts_formats, f'"{ext}" was specified twice'

        self._exts_formats[ext] = fmts

    def add_exts(self, exts: list[str], fmts: list[Format]) -> None:
        assert fmts, f'the formats for "{exts}" was not specified'
        for ext in exts:
            self._add_ext(ext, fmts)

    def add_compress_format_tools_relation(self,
                                           fmts: Tuple[Format, ...],
                                           tools: list['CTool']) -> None:
        assert fmts
        assert tools
        assert not fmts in self._cfmt_tool_rels, 'fmts is assigned twice'

        self._cfmt_tool_rels[fmts] = tools

    def detect_formats(self, format_filename: str) -> list[Format]:
        format_filename = format_filename.strip()
        if not format_filename:
            return []
        fmts: list[Format] = []
        exts = format_filename.split('.')[1:]
        exts.reverse()
        category_left = FormatCategory.ALL
        for ext in exts:
            cfmts = self._exts_formats.get(ext, [])
            ccatg_found = reduce(lambda f, n: f | n.category,
                                                 cfmts,
                                                 FormatCategory(0))

            if not cfmts:
                break
            catg_conflict = int(ccatg_found) > int(category_left)
            if catg_conflict:
                break

            fmts = cfmts + fmts
            category_left = category_left.sub_and_normalize(ccatg_found)

        return fmts

    def get_ctools_for(self, fmt: Format) -> list['CTool']:
        #this is converted to a list because this would change fmt to a list
        #to get for example 7zip for [tar.gz]
        key = tuple([fmt])
        return self._cfmt_tool_rels.get(key, [])

    def get_first_available_tool(self, tools: list['CTool']) -> Optional['CTool']:
        for tool in tools:
            if tool.is_available():
                return tool
        return None

class InputTool:
    _tmps_id_counter: int = 0

    def __init__(self, arity: Arity, support_stdin: bool) -> None:
        InputTool._ensure_valid_init_args(arity, support_stdin)
        self.arity: Arity = arity
        self.support_stdin: bool = support_stdin

        self._src: FilesSrcResolver = FilesSrcResolver()
        self._temp_file: Optional[str] = None
        self._temp_stream: Optional[IO[bytes]] = None

    @staticmethod
    def _ensure_valid_init_args(arity: Arity, support_stdin: bool) -> None:
        if arity == Arity.ZERO:
            assert support_stdin

    @classmethod
    def _get_next_tmp_id(cls) -> int:
        cls._tmps_id_counter += 1
        return cls._tmps_id_counter

    def set(self, src: FilesSrc | FilesSrcResolver) -> None:
        if isinstance(src, FilesSrcResolver):
            self._src = src
        else:
            fsr = FilesSrcResolver()
            fsr.set(src)
            self._src = fsr

    def _try_convert_to_args(self) -> Optional[list[str]]:
        global TMP_DIR
        src = self._src.get_as_stream()

        os.makedirs(TMP_DIR, exist_ok=True)
        tmp_path = TMP_DIR + '/in_temp_' + str(InputTool._get_next_tmp_id())
        try:
            with open(tmp_path, 'wb') as tmp_stream:
                shutil.copyfileobj(src, tmp_stream)
                self._temp_file = tmp_path
                return [tmp_path]
        except:
            return None

    @property
    def is_stream(self) -> bool:
        return self._src.is_stream_or_pipe()

    def consume_as_args(self) -> Optional[list[str]]:
        if self._src.is_args():
            return self._src.get_as_args()
        return self._try_convert_to_args()

    def _try_convert_to_stream(self) -> Optional[IO[bytes]]:
        src = self._src.get_as_args()
        if len(src) > 1:
            return None
        file_arg = src[0]
        try:
            f = open(file_arg, 'rb')
        except:
            return None
        self._temp_stream = f
        return f

    def consume_as_stream(self) -> Optional[IO[bytes]]:
        if self._src.is_stream_or_pipe():
            return self._src.get_as_stream()
        return self._try_convert_to_stream()

    def dispose(self) -> bool:
        if self._temp_stream:
            self._temp_stream.close()

        if self._temp_file:
            try:
                os.remove(self._temp_file)
            except:
                return False
        return True

class OutputTool:
    def __init__(self, arity: Arity, support_stdout: bool) -> None:
        self.arity: Arity = arity
        self.support_stdout: bool = support_stdout

        self._output: FilesSrcResolver = FilesSrcResolver()
        self._temp_stream: Optional[IO[bytes]] = None
 
    def set(self, output: FilesSrc) -> None:
        if isinstance(output, list):
            assert len(output) == 1

        self._output.set(output)

    def set_pipe(self) -> FilesSrcResolver:
        assert not self._output.has_value(), (
            'you cannot specify a value and then use set_pipe, because' 
            ' internally it set the output to PIPE')
        self._output.set_pipe()
        return self._output

    def set_piped_stream(self, stream: IO[bytes]) -> None:
        self._output.set_piped_stream(stream)

    @property
    def is_stream(self) -> bool:
        return self._output.is_stream_or_pipe()

    def consume_as_args(self) -> Optional[list[str]]:
        if self._output.is_stream() or self._output.is_pipe():
            raise NotImplementedError()
        else:
            return self._output.get_as_args()

    def _try_convert_to_stream(self, outputs: list[str]) -> Optional[IO[bytes]]:
        if len(outputs) > 1:
            return None
        out_arg = outputs[0]
        try:
            f = open(out_arg, 'wb')
        except:
            return None
        self._temp_stream = f
        return f

    def consume_as_stream(self) -> Optional[IO[bytes] | int]:
        if self._output.is_args():
            return self._try_convert_to_stream(self._output.get_as_args())
        else:
            if self._output.is_pipe():
                return PIPE
            else:
                return self._output.get_as_stream()

    def dispose(self) -> bool:
        if self._temp_stream:
            self._temp_stream.close()
        return True

class CTool:
    def __init__(self,
                 name: str,
                 cmd_args_gen: CmdArgsGen,
                 input_spec: InputTool,
                 output_spec: OutputTool,
                 tool_name: str = '') -> None:
        assert name

        self._name: str = name
        self._cmd_args_gen: CmdArgsGen = cmd_args_gen
        self._tool_name: str = tool_name if tool_name else name
        self._input: InputTool = input_spec
        self._output: OutputTool = output_spec

        self._current_process: Optional[Popen[bytes]] = None

    @property
    def name(self) -> str:
        return self._name

    def is_available(self) -> bool:
        return bool(shutil.which(self._tool_name))

    @property
    def input(self) -> InputTool:
        return self._input

    @property
    def output(self) -> OutputTool:
        return self._output

    def _try_get_inputs(self) -> Tuple[bool, list[str], Optional[IO[bytes]]]:
        '''returns (is_ok, args_input, stream or stdin input) or defaults'''
        assert self._input

        args: list[str] = []
        stream: Optional[IO[bytes]] = None
        cinput = self._input

        if not cinput.support_stdin:
            args = cinput.consume_as_args() or []
        else:
            if cinput.is_stream:
                stream = cinput.consume_as_stream()
            else:
                args = cinput.consume_as_args() or []
        is_ok: bool = bool(args) ^ bool(stream)
        return (is_ok, args, stream)

    def _try_get_output(self) -> Tuple[bool, Optional[str], Optional[IO[bytes] | int]]:
        assert self._output

        arg: Optional[str] = None
        stream: Optional[IO[bytes] | int] = None
        coutput = self._output
        if not coutput.support_stdout:
            tmp_args = coutput.consume_as_args()
            arg = tmp_args[0] if tmp_args else None
            return (bool(arg), arg, None)

        if coutput.arity == Arity.ZERO:
            stream = coutput.consume_as_stream()
            return (bool(stream), None, stream)

        if coutput.is_stream:
            stream = coutput.consume_as_stream()
        else:
            tmp_args = coutput.consume_as_args()
            arg = tmp_args[0] if tmp_args else None
        is_ok = bool(arg) ^ bool(stream)
        return (is_ok, arg, stream)

    def start(self) -> bool:
        input_ok, input_args, input_stream = self._try_get_inputs()
        output_ok, output_args, output_stream = self._try_get_output()

        if not input_ok or not output_ok:
            return False

        args = self._cmd_args_gen(output_args, input_args)
        process = Popen(
                args,
                stdin=input_stream,
                stdout=output_stream)

        self._current_process = process

        if input_stream is not None:
            input_stream.close()
        if output_stream is not None:
            if output_stream != PIPE:
                #nobody will close the output of this poor boy so close it yourself
                assert not isinstance(output_stream, int)
                output_stream.close()
            else:
                assert process.stdout is not None
                self._output.set_piped_stream(process.stdout)


        return True

    def dispose(self) -> None:
        assert self._current_process
        self._current_process.wait()
        self._input.dispose()
        self._output.dispose()

def create_ctar() -> CTool:
    def ctar_cmd_args_gen(output: Optional[str], args_input: list[str]) -> list[str]:
        #TODO: tar support stdin but to pass a list of file to read
        #not implemented this yet but could be in the future
        poutput = output if output else '-'
        args = ['tar', '-cf', poutput] + args_input
        return args

    input_spec = InputTool(Arity.INF, False)
    output_spec = OutputTool(Arity.ONE, True)
    return CTool('tar', ctar_cmd_args_gen, input_spec, output_spec)

def create_cgzip() -> CTool:
    def cgzip_cmd_args_gen(output: Optional[str], args_input: list[str]) -> list[str]:
        args = ['gzip', '--stdout']
        if args_input:
            args.append(args_input[0])
        return args

    input_spec = InputTool(Arity.ONE, True)
    output_spec = OutputTool(Arity.ZERO, True)
    return CTool('gzip', cgzip_cmd_args_gen, input_spec, output_spec)

class CToolsManager:
    def __init__(self, tools: list[CTool], err_msg: str = '') -> None:
        assert bool(tools) ^ bool(err_msg), 'specify the tools or err_msg. no both'
        self._tools: list[CTool] = tools
        self._can_run: bool = not bool(err_msg)
        self._err_msg: str = err_msg
        self._inputs: Optional[FilesSrc] = None
        self._output: Optional[FilesSrc] = None

    @staticmethod
    def with_error(err_msg: str) -> 'CToolsManager':
        return CToolsManager([], err_msg)

    @staticmethod
    def create_from_formats(fmts: list[Format]) -> 'CToolsManager':
        assert fmts, 'you need to specify formats'
        tools_found: list[CTool] = []
        for fmt in fmts:
            ctools = FM.get_ctools_for(fmt)
            ctool = FM.get_first_available_tool(ctools)
            if not ctool:
                err_msg = (
                        f'there is not tools that support "{fmt}" format '
                        f'installed in the system. these tools can be {ctools}'
                        )
                return CToolsManager.with_error(err_msg)
            tools_found.append(ctool)
        return CToolsManager(tools_found)

    def set_inputs(self, inputs: FilesSrc) -> bool:
        if not self._can_run:
            return False

        self._inputs = inputs
        return True

    def set_output(self, output: FilesSrc) -> None:
        assert isinstance(output, list) and len(output) == 1
        self._output = output

    @property
    def can_run(self) -> bool:
        return self._can_run

    def get_err(self) -> str:
        return self._err_msg

    def _tool_can_handle_amount_inputs(self, tool: CTool) -> bool:
        assert self._inputs is not None
        assert not isinstance(self._inputs, int), (
                'if inputs is int it is treated as PIPE and PIPE is only '
                'for connections')
        if isinstance(self._inputs, IO):
            return True

        return not (
                tool.input.arity == Arity.ONE and
                len(self._inputs) > 1)

    def _pipe_tools_together(self, tools: list[CTool]) -> None:
        l = len(tools)
        for i in range(l - 1):
            c = tools[i]
            n = tools[i+1]
            stream_flow = c.output.set_pipe()
            n.input.set(stream_flow)

    def run(self) -> str:
        assert self._can_run
        assert self._output
        assert self._inputs is not None

        if not self._inputs:
            return 'You need to specify files to compress, None was specified'

        tools = self._tools
        
        ftool = tools[0]
        ltool = tools[-1]

        if not self._tool_can_handle_amount_inputs(ftool):
            return (
                f'cannot compress multiple files because the first format used'
                f' is {ftool.name}')

        ftool.input.set(self._inputs)
        self._pipe_tools_together(tools)
        ltool.output.set(self._output)

        for t in tools:
            t.start()
        for t in tools:
            t.dispose()
        return ''

# ####################
# Constants
# ####################

PROG_NAME = 'spack'
PROG_DESC = 'A tool to unify all archiving, compressing, encription tools'
PROG_VERSION = '0.0.1'
PROG_REPOSITORY = 'https://github.com/soworksl2/spack'

TMP_DIR = '/var/tmp/spack_tmps'

FM: FormatManager = FormatManager()
tar_fm: Format = FM.add_format('tar', FormatCategory.ARCHIVING)
gzip_fm: Format = FM.add_format('gzip', FormatCategory.COMPRESING)
xz_fm: Format = FM.add_format('xz', FormatCategory.COMPRESING)
bzip2_fm: Format = FM.add_format('bzip2', FormatCategory.COMPRESING)
gpg_fm: Format = FM.add_format('gpg', FormatCategory.ENCRYPTING)
zip_fm: Format = FM.add_format('zip', FormatCategory.ALL)

FM.add_exts(['tar'], [tar_fm])
FM.add_exts(['gzip', 'gz', 'z'], [gzip_fm])
FM.add_exts(['tgzip', 'tgz'], [tar_fm, gzip_fm])
FM.add_exts(['xz'], [xz_fm])
FM.add_exts(['txz'], [tar_fm, xz_fm])
FM.add_exts(['bzip2', 'bz2'], [bzip2_fm])
FM.add_exts(['tbzip2', 'tbz2'], [tar_fm, bzip2_fm])
FM.add_exts(['gpg'], [gpg_fm])
FM.add_exts(['zip'], [zip_fm])

FM.add_compress_format_tools_relation((tar_fm,), [create_ctar()])
FM.add_compress_format_tools_relation((gzip_fm,), [create_cgzip()])

# ####################
# Argument Parser
# ####################

parser = ArgumentParser(
        prog=PROG_NAME,
        description=PROG_DESC,
        )

parser.add_argument('--version',
                    action='store_true',
                    dest='version',
                    help='show the version of this tool'
                    )

operation_group = parser.add_mutually_exclusive_group()
operation_group.add_argument('-c', '--compress',
                             action='store_const',
                             const=Operation.COMPRESS,
                             dest='operation',
                             help='set operation mode to compression')
operation_group.add_argument('-d', '--decompress',
                             action='store_const',
                             const=Operation.DECOMPRESS,
                             dest='operation',
                             help='set operation mode to decompression')

parser.add_argument('files',
                    nargs='*',
                    default=[],
                    help='the files to operates on')
parser.add_argument('--informative',
                    action='store_true',
                    dest='informative',
                    help='Outputs information about the current execution process')
parser.add_argument('--dry',
                    action='store_true',
                    dest='dry',
                    help=('stop execution after recopiling all information, it does not'
                        ' modify the disk. It is intended to be used with --informative'))
parser.add_argument('--format',
                    help=('specify the format to be used when compress or decompress.' 
                        ' it should be the standard extension of the format for example:' 
                        ' "tar.gz" or "tgz" for tar and gzip tools or "zip" for zip'))
parser.add_argument('-o', '--output',
                    help=('the output directory if --decompress' 
                        ' (defaults to ${cwd}/{decompression_filename}/), or the' 
                        ' resulting compressed file if --compress'))

# ####################
# Functions
# ####################

def print_version() -> None:
    print(f'{PROG_NAME} version ({PROG_VERSION})')
    print(f'Repository: {PROG_REPOSITORY}')

def title(title: str) -> None:
    print()
    print(f'[[{title}]]')

def err(msg: str) -> None:
    print(f'ERROR: {msg}')

def print_compression_information(args: Namespace, fmts_detected: list[Format]) -> None:
    title('informative')
    print(f'operation: compression')
    print(f'output: {args.output}')
    print(f'format used: {fmts_detected}')
    print(f'is dry: {args.dry}')
    print(f'files: {args.files}')

def print_information(operation: Operation, output: str, fmts_detected: list[Format], args: Namespace) -> None:
    title('informative')
    print(f'operation: {operation!s}')
    print(f'output: {output}')
    print(f'format used: {fmts_detected}')
    print(f'is dry: {args.dry}')
    print(f'files: {args.files}')

def execute_compression(args: Namespace) -> int:
    output: str = args.output
    format_filename = output
    if args.format is not None:
        format_filename = 'dumb_file.' + args.format.removeprefix('.')

    if not output:
        err('you need to specify the --output file for --compress')
        return 1

    fmts = FM.detect_formats(format_filename)

    if args.informative:
        print_compression_information(args, fmts)

    if args.dry:
        return 0

    tools_manager = CToolsManager.create_from_formats(fmts)
    tools_manager.set_inputs(args.files)
    tools_manager.set_output([output])
    err_msg = tools_manager.run()
    if err_msg:
        err(err_msg)
        return 1

    return 0

def extract_file_for_decompression_or_fail(files: list[str]) -> Tuple[str, str]:
    filesl = len(files)
    if filesl > 1:
        err_msg = (
                f'you specified {filesl} files "{files}" and only 1 is allowed'
                'to operates on')
        return ('', err_msg)
    elif filesl < 1:
        err_msg = 'you need to specify at least 1 file to operates on. use -h'
        return ('', err_msg)
    return (files[0], '')


def execute_decompression(args: Namespace) -> int:
    file, errmsg = extract_file_for_decompression_or_fail(args.files)
    if errmsg:
        err(errmsg)
        return 1

    output = args.output or os.path.abspath('.')

    format_filename = file
    if args.format is not None:
        format_filename = 'dumb_file.' + args.format.removeprefix('.')

    fmts = FM.detect_formats(format_filename)
    
    if args.informative:
        print_information(Operation.DECOMPRESS, output, fmts, args)
    if args.dry:
        return 0

    return 0

def main() -> int:
    args = parser.parse_args()

    if args.version:
        print_version()
        return 0

    match args.operation:
        case Operation.COMPRESS:
            return execute_compression(args)
        case Operation.DECOMPRESS:
            return execute_decompression(args)
        case _:
            parser.print_usage()
            err('An invalid or no operation was specified. --help for help')
            return 1

if __name__ == '__main__':
    status_code = main()
    sys.exit(status_code)
